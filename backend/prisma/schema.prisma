generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum FileType {
  IMAGE
  VIDEO
}

enum ModelType {
  CV
  NLP
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DetectionStatus {
  VIOLENCE_DETECTED
  NON_VIOLENCE
  INCONCLUSIVE
  GUN_DETECTED
  NO_GUN
  FIRE_DETECTED
  NO_FIRE
}

model User {
  id             String           @id @default(uuid())
  username       String
  email          String           @unique
  password       String
  role           UserRole         @default(USER)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  uploadsHistory UploadsHistory[]
  uploadStats    UserStats?
}

model UploadsHistory {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileType          FileType
  processingStatus  ProcessingStatus  @default(PENDING)
  detectionStatus   DetectionStatus?
  overallConfidence Float? // Overall confidence score for detection
  duration          Float? // For videos (in seconds)
  fileSize          Int // In bytes
  uploadedAt        DateTime          @default(now())
  annotatedFilePath String? // Path to processed file
  detectionResults  DetectionResult[]

  @@index([userId])
  @@index([processingStatus])
  @@index([detectionStatus])
}

model DetectionResult {
  id         String         @id @default(uuid())
  uploadId   String
  upload     UploadsHistory @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  timestamp  Float? // For videos (seconds into media)
  confidence Float
  label      String? // Specific detection label (e.g., "blood", "weapon")
  severity   Float? // Severity score (0-1)
  createdAt  DateTime       @default(now())

  @@index([uploadId])
}

model UserStats {
  id                  String           @id @default(uuid())
  userId              String           @unique
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalUploads        Int              @default(0)
  averageDuration     Float? // Average duration of all videos
  lastDetectionStatus DetectionStatus?
  lastUploadDate      DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@index([userId])
}

model Alert {
  id        Int      @id @default(autoincrement())
  image     String
  lat       Float
  lng       Float
  timestamp DateTime @default(now())
}

model AIModel {
  id          Int       @id @default(autoincrement())
  name        String
  type        ModelType // 'CV' or 'NLP'
  description String
  endpoint    String
  createdAt   DateTime  @default(now())
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String
  category    String
  price       Float
  features    String
  requirements String
  modelFile   String
  demoVideo   String?
  documentation String?
  isPublic    Boolean  @default(false)
  supportedPlatforms Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requests    ServiceRequest[]
}

model ServiceRequest {
  id          String   @id @default(uuid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  customerId  String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id                 String           @id @default(uuid())
  email              String           @unique
  fullName           String
  companyName        String
  companyType        String
  purchasedModels    Json
  contactNumber      String?
  address            String?
  industry           String?
  password           String
  hasChangedPassword Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
