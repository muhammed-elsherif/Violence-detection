generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum FileType {
  IMAGE
  VIDEO
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DetectionStatus {
  VIOLENCE_DETECTED
  NON_VIOLENCE
  INCONCLUSIVE
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  role        UserRole     @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  uploadsHistory     UploadsHistory[]
  uploadStats        UserUploadStats?
}

model UploadsHistory {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  fileType          FileType
  processingStatus  ProcessingStatus    @default(PENDING)
  detectionStatus   DetectionStatus?
  overallConfidence Float?              // Overall confidence score for detection
  duration          Float?              // For videos (in seconds)
  fileSize          Int                 // In bytes
  uploadedAt        DateTime            @default(now())
  annotatedFilePath String?             // Path to processed file
  detectionResults  DetectionResult[]

  @@index([userId])
  @@index([processingStatus])
  @@index([detectionStatus])
}

model DetectionResult {
  id          String   @id @default(uuid())
  uploadId    String
  upload      UploadsHistory   @relation(fields: [uploadId], references: [id])
  timestamp   Float?   // For videos (seconds into media)
  confidence  Float
  label       String?  // Specific detection label (e.g., "blood", "weapon")
  severity    Float?   // Severity score (0-1)
  createdAt   DateTime @default(now())

  @@index([uploadId])
}

model UserUploadStats {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  totalUploads      Int       @default(0)
  averageDuration   Float?    // Average duration of all videos
  lastDetectionStatus DetectionStatus?
  lastUploadDate    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}
